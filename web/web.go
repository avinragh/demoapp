// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package web

import (
	"net/http"

	"demoapp/context"
	"demoapp/db"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /Accounts)
	FindAccounts(w http.ResponseWriter, r *http.Request, params db.FindAccountsParams)

	// (POST /Accounts)
	AddAccounts(w http.ResponseWriter, r *http.Request)

	// (DELETE /Accounts/{id})
	DeleteAccount(w http.ResponseWriter, r *http.Request, id string)

	// (GET /Accounts/{id})
	FindAccountById(w http.ResponseWriter, r *http.Request, id int32)

	// (POST /Accounts/{id})
	AddAccountById(w http.ResponseWriter, r *http.Request, id string)

	// (GET /Servers)
	FindServers(w http.ResponseWriter, r *http.Request, params db.FindServersParams)

	// (POST /Servers)
	AddServers(w http.ResponseWriter, r *http.Request)

	// (DELETE /Servers/{id})
	DeleteServer(w http.ResponseWriter, r *http.Request, id string)

	// (GET /Servers/{id})
	FindServerById(w http.ResponseWriter, r *http.Request, id string)

	// (POST /Servers/{id})
	AddServerById(w http.ResponseWriter, r *http.Request, id string)

	// (GET /Alarms)
	FindAlarms(w http.ResponseWriter, r *http.Request, params db.FindAlarmsParams)

	// (POST /Alarms)
	AddAlarms(w http.ResponseWriter, r *http.Request)

	// (DELETE /Alarms/{id})
	DeleteAlarm(w http.ResponseWriter, r *http.Request, id string)

	// (GET /Alarms/{id})
	FindAlarmById(w http.ResponseWriter, r *http.Request, id string)

	// (POST /Alarms/{id})
	AddAlarmById(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.

type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	Context            *context.Context
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

func (siw *ServerInterfaceWrapper) GetContext() *context.Context {
	return siw.Context
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(ctx *context.Context, si ServerInterface) http.Handler {
	return HandlerWithOptions(ctx, si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(ctx *context.Context, si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(ctx, si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(ctx *context.Context, si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(ctx, si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(ctx *context.Context, si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		Context:            ctx,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Accounts", wrapper.FindAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/Accounts", wrapper.AddAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/Accounts/{id}", wrapper.DeleteAccount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Accounts/{id}", wrapper.FindAccountById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/Accounts/{id}", wrapper.AddAccountById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Servers", wrapper.FindServers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/Servers", wrapper.AddServers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/Servers/{id}", wrapper.DeleteServer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Servers/{id}", wrapper.FindServerById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Servers/{id}", wrapper.AddServerById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Alarms", wrapper.FindAlarms)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/Alarms", wrapper.AddAlarms)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/Alarms/{id}", wrapper.DeleteAlarm)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Alarms/{id}", wrapper.FindAlarmById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Alarms/{id}", wrapper.AddAlarmById)
	})
	return r
}
